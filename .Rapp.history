rpois(1,T1)+1
rpois(1,T1)+1
rpois(1,T1)+1
rpois(1,T1)+1
rpois(1,T1)+1
rpois(1,T1)+1
rpois(1,T1)+1
rpois(1,T1)+1
rpois(1,T1)+1
Sample z_ij (scalar Z_ij) from zero truncated poisson#
			mu <- xi[ID]*exp(u%*%beta)#
			mean_pois <- x%*%mu#
			unif <- runif(1)#
			tt <- -log(1-unif*(1-exp(mean_pois)))#
			T1 <- mean_pois-tt#
			z_ij <- rpois(1,T1)+1
z_ij
ns <- z_ij
ns
P <- as.numeric(x*mu/as.numeric(x%*%mu))
P
mean_pois
mean_pois <- as.numeric(x%*%mu)#
			unif <- runif(1)#
			tt <- -log(1-unif*(1-exp(mean_pois)))#
			T1 <- mean_pois-tt#
			z_ij <- rpois(1,T1)+1
z_ij
x*mu/mean_pois
P <- x*mu/mean_pois
P
rmult(z_ij,P)
rmult(z_ij,P)
rmult(z_ij,P)
rmult(z_ij,P)
rmult(z_ij,P)
ns
P
nrow(P)
ncol(P)
Ys<- matrix(0,nrow(P),ncol(P))
Ys
sum(ns)>0
ns
(sum(ns)>0)
[ns>0,1]
Ys[ns>0,1]
Ys
if(sum(ns)>0)#
    Ys[ns>0,1]<- rbinom(sum(ns>0),ns[ns>0],P[ns>0,1])#
  ns<- ns-Ys[,1]
Ys
(sum(ns)>0)
if(sum(ns)>0) Ys[ns>0,2]<- rbinom(sum(ns>0),ns[ns>0],P[ns>0,2]/(1-P[ns>0,1]))
P
P <- matrix(x*mu/mean_pois,nrow=1,ncol=K)
P
rmult(z_ij,P)
rmult(z_ij,P)
rmult(z_ij,P)
rmult(z_ij,P)
rmult(z_ij,P)
rmult(z_ij,P)
rmult(z_ij,P)
rmult(z_ij,P)
rmult(z_ij,P)
rmult(z_ij,P)
rmult(z_ij,P)
rmult(z_ij,P)
rmult(z_ij,P)
rmult(z_ij,P)
rmult(z_ij,P)
rmult(z_ij,P)
rmult(z_ij,P)
rmult(z_ij,P)
rmult(z_ij,P)
rmult(z_ij,P)
rmult(z_ij,P)
z_ij
rmult(z_ij,P)
rmult(z_ij,P)
rmult(z_ij,P)
rmult(z_ij,P)
rmult(z_ij,P)
rmult(z_ij,P)
rmult(z_ij,P)
rmult(z_ij,P)
Z[idcyc]<-rmult(z_ij,P)
Z[idcyc]
Z
Sample Z_ij (vector Z_ij)#
			ns <- z_ij#
			P <- matrix(x*mu/mean_pois,nrow=1,ncol=K)#
			Z[idcyc]<-rmult(ns,P)
Sample Latent Variable Z#
	Z<-numeric(length=N)#
	for (i in 1:ncyc) {#
		#Define data for individual i, cycle j#
		idcyc<-(K*(i-1)+1):(i*K)#
		u<-U[idcyc,]#
		x<-X[idcyc]#
		y<-Y[i]#
		ID<-unique(id[idcyc])#
#
		#Sample Z_ij#
		if (y!=0) {#
			#Sample z_ij (scalar Z_ij) from zero truncated poisson (https://stat.ethz.ch/pipermail/r-help/2005-May/070678.html)#
			mu <- xi[ID]*exp(u%*%beta)#
			mean_pois <- as.numeric(x%*%mu)#
			unif <- runif(1)#
			tt <- -log(1-unif*(1-exp(mean_pois)))#
			T1 <- mean_pois-tt#
			z_ij <- rpois(1,T1)+1#
			#Sample Z_ij (vector Z_ij)#
			ns <- z_ij#
			P <- matrix(x*mu/mean_pois,nrow=1,ncol=K)#
			Z[idcyc]<-rmult(ns,P)#
		}#
	}
Z
cbind(Z,X)
H
a<-rep(3,H)#
b<-rep(1,H)#
p<-rep(0.5,H)
A<-matrix(nrow=H,ncol=2)
A
A[,2]<-rep(Inf,H)
A[,1]<-rep(0,H)
A
A[h,]
h
h<-1
Set hyperparameters#
		ah<-a[h]#
		bh<-b[h]#
		ph<-p[h]#
		Ah<-A[h,]
ah
bh
ph
Ah
Load Libraries (may need a few extra functions...)#
#
###Read in Data (format data into the Y, U and X matrices)#
{#
  if (Sys.info()[8] == "dpritch")#
    setwd("/home/dpritch/Documents/Projects/Dunson Day Specific/Software")#
  else#
    setwd("/Users/Sam/Documents/Sam/School/Graduate/Dave/DSP_Software/")#
}#
load("Data/PracticeDat.RData")#
#
###Create Data Objects (define objects like n, n_i)#
K<-5 #fertile window#
ncyc<-length(Y) #number of cycles#
N<-dim(U)[1] #number observation days#
n<-length(unique(id)) #number of individuals#
H<-dim(U)[2] #number of covariates#
#
###Matrix Objects (define objects )#
eyen<-diag(n)#
onen<-rep(1,n)#
#
###Initial Values#
phi<-1#
g<-rep(1,H)#
b<-log(g)#
xi<-rep(1,n)
Hyperparameters#
a<-rep(3,H)#
b<-rep(1,H)#
p<-rep(0.5,H)#
A<-matrix(nrow=H,ncol=2)#
A[,1]<-rep(0,H)#
A[,2]<-rep(Inf,H)
phi_propvar<-1#
acceptance_phi<-0
rm(gamma)
rm(beta)
C <- function(a,b) x<-b^a/gamma(a); return(x)
C <- function(a,b) x<-b^a/gamma(a)
C(3,1)
C <- function(a,b) x<-b^a/gamma(a); x
C <- function(a,b) x<-b^a/gamma(a); x
x
C <- function(a,b) out<-b^a/gamma(a); out
C <- function(a,b) {out<-b^a/gamma(a); return(out)}
C(3,1)
g
U[,h]
Z
dim(U)
dim(Z)
length(Z)
U[,h]
uh<-U[,h]
Set hyperparameters#
		ah <- a[h]#
		bh <- b[h]#
		ph <- p[h]#
		Ah <- A[h,]
uh <- U[,h]
uh
uh*Z
sum(uh*Z)
g
g^U
dim(g^U)
dim(g^U)[,-h]
g^U[,-h]
temp <- g^U
temp <- g^U
dim(temp)
temp <- temp[,-h]
dim(temp)
apply(temp,1,prod)
g
prod_gamma <- apply(temp,1,prod)
prod_gamma
xi
table(id)
lapply(xi,rep,table(id)/5)
table(id)/5
lapply(xi,rep,as.numeric(table(id)/5))
lapply(1:5,rep)
lapply(1:5,rep,each=2)
lapply(1:5,rep,by=2)
lapply(xi,rep,by=as.numeric(table(id)/5))
unlist(lapply(xi,rep,by=as.numeric(table(id)/5)))
unlist(lapply(xi,rep,each=as.numeric(table(id)/5)))
warnings()
mapply(rep,1:4,4:1)
unlist(mapply(rep,1:4,4:1))
unlist(mapply(rep,xi,4:1))
unlist(mapply(rep,xi,as.numeric(table(id)/5))))
unlist(mapply(rep,xi,as.numeric(table(id)/5)))
unlist(mapply(rep,xi,as.numeric(table(id))))
xi<-1:300
unlist(mapply(rep,xi,as.numeric(table(id))))
xi<-rep(1,n)
xi_i <- unlist(mapply(rep,xi,as.numeric(table(id))))
xi_i*prod_gamma
sum(xi_i*prod_gamma)
ah_t
bh_t
uh <- U[,h]		#
		ah_t <- ah+sum(uh*Z)	#
		temp <- g^U#
		temp <- temp[,-h]#
		prod_gamma <- apply(temp,1,prod)#
		xi_i <- unlist(mapply(rep,xi,as.numeric(table(id))))#
		bh_t <- bh+sum(xi_i*prod_gamma)
num<-(ph*exp(-(bh_t-bh)))
num
bh_t-bh
exp(-(bh_t-bh))
cons
cons<-C(ah,bh)/C(ah_t,bh_t)
cons
num+(1-ph)*cons
pgamma(Ah[2],ah_t,bh_t)
(pgamma(Ah[2],ah_t,bh_t)-pgamma(Ah[1],ah_t,bh_t))
cons2<-(pgamma(Ah[2],ah_t,bh_t)-pgamma(Ah[1],ah_t,bh_t))/(pgamma(Ah[2],ah,bh)-pgamma(Ah[1],ah,bh))
cons2
cons<-cons1*cons2
cons
num<-(ph*exp(-(bh_t-bh)))
num+(1-ph)*cons
den<-num+(1-ph)*cons
ph_t<-num/den
ph_t
pgamma(Ah[1],a,b)
a
b
pgamma(Ah[2],a,b))
pgamma(Ah[2],a,b)
runif(n,pgamma(Ah[1],a,b),pgamma(Ah[2],a,b))
qgamma(runif(n,pgamma(Ah[1],a,b),pgamma(Ah[2],a,b)),a,b)
Sample from one-inflated gamma truncated by region A#
rI1gammaT <- function(n,p,a,b,A){#
  z <- rbinom(n,1,p)#
  z+(1-z)*qgamma(runif(n,pgamma(A[1],a,b),pgamma(A[2],a,b)),a,b)#
}
ph_t
rI1gammaT(1,ph_t,ah_t,bh_t,Ah)
rI1gammaT(1,ph_t,ah_t,bh_t,Ah)
rI1gammaT(1,ph_t,ah_t,bh_t,Ah)
rI1gammaT(1,ph_t,ah_t,bh_t,Ah)
rI1gammaT(1,ph_t,ah_t,bh_t,Ah)
rI1gammaT(1,ph_t,ah_t,bh_t,Ah)
rI1gammaT(1,ph_t,ah_t,bh_t,Ah)
rI1gammaT(1,ph,ah_t,bh_t,Ah)
rI1gammaT(1,ph,ah_t,bh_t,Ah)
rI1gammaT(1,ph,ah_t,bh_t,Ah)
rI1gammaT(1,ph,ah_t,bh_t,Ah)
rI1gammaT(1,ph,ah_t,bh_t,Ah)
rI1gammaT(1,ph,ah_t,bh_t,Ah)
rI1gammaT(1,ph,ah_t,bh_t,Ah)
rI1gammaT(1,ph,ah_t,bh_t,Ah)
rI1gammaT(1,ph,ah_t,bh_t,Ah)
rI1gammaT(1,ph,ah_t,bh_t,Ah)
rI1gammaT(1,ph,ah_t,bh_t,Ah)
rI1gammaT(1,ph,ah_t,bh_t,Ah)
rI1gammaT(1,ph,ah_t,bh_t,Ah)
rI1gammaT(1,ph,ah_t,bh_t,Ah)
rI1gammaT(1,ph,ah_t,bh_t,Ah)
rI1gammaT(1,ph,ah_t,bh_t,Ah)
rI1gammaT(1,ph,ah_t,bh_t,Ah)
rI1gammaT(1,ph,ah_t,bh_t,Ah)
rI1gammaT(1,ph,ah_t,bh_t,Ah)
rI1gammaT(1,ph,ah_t,bh_t,Ah)
rI1gammaT(1,ph,ah_t,bh_t,Ah)
rI1gammaT(1,ph,ah_t,bh_t,Ah)
rI1gammaT(1,ph,ah_t,bh_t,Ah)
rI1gammaT(1,ph,ah_t,bh_t,Ah)
rI1gammaT(1,ph,ah_t,bh_t,Ah)
rI1gammaT(1,ph,ah_t,bh_t,Ah)
rI1gammaT(1,ph,ah_t,bh_t,Ah)
rI1gammaT(1,ph,ah_t,bh_t,Ah)
rI1gammaT(1,ph,ah_t,bh_t,Ah)
rI1gammaT(1,ph,ah_t,bh_t,Ah)
rI1gammaT(1,ph,ah_t,bh_t,Ah)
rI1gammaT(1,ph,ah_t,bh_t,Ah)
rI1gammaT(1,ph,ah_t,bh_t,Ah)
rI1gammaT(1,ph,ah_t,bh_t,Ah)
rI1gammaT(1,ph,ah_t,bh_t,Ah)
rI1gammaT(1,ph,ah_t,bh_t,Ah)
rI1gammaT(1,ph,ah_t,bh_t,Ah)
rI1gammaT(1,ph,ah_t,bh_t,Ah)
rI1gammaT(1,ph,ah_t,bh_t,Ah)
rI1gammaT(1,ph,ah_t,bh_t,Ah)
rI1gammaT(1,ph,ah_t,bh_t,Ah)
rI1gammaT(1,ph,ah_t,bh_t,Ah)
rI1gammaT(1,ph,ah_t,bh_t,Ah)
rI1gammaT(1,ph,ah_t,bh_t,Ah)
rI1gammaT(1,ph,ah_t,bh_t,Ah)
rI1gammaT(1,ph,ah_t,bh_t,Ah)
rI1gammaT(1,ph,ah_t,bh_t,Ah)
rI1gammaT(1,ph,ah_t,bh_t,Ah)
rI1gammaT(1,ph,ah_t,bh_t,Ah)
rI1gammaT(1,ph,ah_t,bh_t,Ah)
