simBaselineData(n=10, varDistribs=varD, varParams=varP)
help(is.null)
help(dimnames)
x <- simBaselineData(n=10, varDistribs=varD, varParams=varP)
simBaselineData <- function(n, studyId=NULL, varDistribs, varParams, varNames=NULL) {
## Need to test if valid input ##
## Test if each function accepts n ##
p <- length(varDistribs)
varParams <- convert_varParams(params=varParams, n=n)
if (is.null(varNames))
for (j in 1:p)
varNames[j] <- paste0("v", j)
if (is.null(studyId))
studyId <- 1:n
baseData <- data.frame( matrix(nrow=n, ncol=p) )
dimnames(baseData) <- list(studyId, varNames)
for (j in 1:p)
baseData[, j] <- do.call( what=varDistribs[[ j ]], args=varParams[[ j ]] )
return (baseData)
}
x <- simBaselineData(n=10, varDistribs=varD, varParams=varP)
convert_varParams <- function(params, n) {
for (j in 1:length(varParams)) {
params[[ j ]] <- as.list( params[[ j ]] )
params[[ j ]]$n <- n
}
return (params)
}
x <- simBaselineData(n=10, varDistribs=varD, varParams=varP)
x
simBaselineData <- function(n=NULL, studyId=NULL, varDistribs, varParams, varNames=NULL) {
## Need to test if valid input ##
## Test if each function accepts n ##
p <- length(varDistribs)
varParams <- convert_varParams(params=varParams, n=n)
if (is.null(varNames))
for (j in 1:p)
varNames[j] <- paste0("v", j)
if (is.null(studyId))
studyId <- 1:n
baseData <- data.frame( matrix(nrow=n, ncol=p) )
dimnames(baseData) <- list(studyId, varNames)
for (j in 1:p)
baseData[, j] <- do.call( what=varDistribs[[ j ]], args=varParams[[ j ]] )
return (baseData)
}
varD <- c(rnorm, rpois)
varP <- list( par1=list(mean=10, sd=1), lambda=100 )
x <- simBaselineData(n=10, varDistribs=varD, varParams=varP)
x
help(TODO)
TODO(dpritch)
idIdx <- list(1:10, 11:30)
fertWinLen <- 5
lapply(X=idIdx, FUN=function(x) lapply(seq(1,length(x),fertWinLen),
function(j) x[j:(j + fertWinLen - 1)]) )
idIdx
help(summary.lm)
# Load data simulation functions ----------------------------------------------
#
# TODO: encapsulate the files into 1 driver
setwd("/home/dpritch/Documents/Projects/Dunson Day Specific/Software/Data_Sim")
source("SampBaseline.R")
source("SampCycle.R")
source("SampDaily.R")
source("SampDataComb.R")
# Define study id's (and hence size)  -----------------------------------------
subjId <- 1:300
# Sample baseline data --------------------------------------------------------
baseNames <- c("age","race","bmi","gravid","edu","depr","smoke","drinkAlc","hormContrac")
baseDist <- expression( sample( c("< 30","30-35","35-38","38+"), size=1,
prob=c(0.41, 0.39, 0.11, 0.09) ),              #  <-- age
sample( c("cauc","black","hisp","other"),
size=1, prob=c(0.64, 0.12, 0.16, 0.08) ),      #  <-- race
sample( c("< 25","25-30","30+"), size=1,
prob=c(0.63, 0.21, 0.16) ),                    #  <-- bmi
sample( c("no","yes"), size=1, prob=c(0.42,0.58) ),    #  <-- gravid
sample( c("no college","college","grad/prof"),
size=1, prob=c(0.58, 0.30, 0.12) ),            #  <-- edu
sample( c("no","yes"), size=1, prob=c(0.90, 0.10) ),   #  <-- depr
sample( c("no","yes"), size=1, prob=c(0.82, 0.18) ),   #  <-- smoke
sample( c("no","yes"), size=1, prob=c(0.44, 0.56) ),   #  <-- drinkAlc
sample( c("no","yes"), size=1, prob=c(0.83, 0.17) ) )  #  <-- hormContrac
baseline <- sampBaseline(subjId=subjId, varDist=baseDist, varNames=baseNames)
# Sample cycle data -----------------------------------------------------------
# Describe the left and right truncation of observed data.  'lengthDist' is interpreted by
# sampCycle as *additional cycles in study after the first* (i.e. 0 is an allowable value).
entryDist <- expression( sample.int(n=3, size=1, prob=c(0.34,0.33,0.33)) )
lengthDist <- expression( rgeom(n=1, prob=0.25) )
# Describe the data-generating process for cycle-specific variables
cycNames <- c("cycleLen","opk_use","bleed_intermen","bleed_luteal")
cycDist <- expression( sample( c("< 28 days","28-31 days","32+ days"),
size=1, prob=c(0.11, 0.69, 0.20) ),             #  <-- cycleLen
sample( c("no","yes"), size=1, prob=c(0.70, 0.30) ),    #  <-- opk_use
sample( c("no","yes"), size=1, prob=c(0.57, 0.43) ),    #  <-- bleed_intermen
sample( c("no","yes"), size=1, prob=c(0.64, 0.36) ) )   #  <-- bleed_luteal
# Sample cycle data from the aforementioned distributions
cycle <- sampCycle(subjId=subjId, entryDist=entryDist, lengthDist=lengthDist,
maxStudyCyc=12, varDist=cycDist, varNames=cycNames)
# Sample daily data -----------------------------------------------------------
dailyNames <- c("intercourse","cm_monit","lube")
dailyDist <- expression( sample( c("no","yes"), size=1, prob=c(0.64, 0.36) ),    #  <-- intercourse
sample( c("didn't check","type 1",
"type 2","type 3","type 4"),
size=1, prob=c(0.04, 0.05, 0.08, 0.04, 0.79) ), #  <-- cm_monit
sample( c("no","yes"), size=1, prob=c(0.88, 0.12) ) )   #  <-- lube
daily <- sampDaily(nTot=nrow(cycle), fwLen=5, varDist=dailyDist, varNames=dailyNames)
# Combine data into a daily set -----------------------------------------------
analyData <- sampDataComb(baseline=baseline, cycle=cycle, daily=daily, fwLen=5)
betaDays <- log( c(0.14, 0.08, 0.34, 0.31, 0.08) )
betaCovs <- list( age = c(-0.08, -0.43, -1.03),
bmi = c(-0.22, -0.47),
gravid = 1.21 )
pregVec <- sampPreg(dspDat=analyData, betaDays=betaDays, betaCovs=betaCovs, phi=1, fwLen=5)
source("SampPreg.R")
pregVec <- sampPreg(dspDat=analyData, betaDays=betaDays, betaCovs=betaCovs, phi=1, fwLen=5)
table(pregVec)
86/300
rep(c(1,2,3), each=3)
help(rep)
rep.int(c(1,2,3), each=3)
help(unlist)
getCycIdx <- function(idVec, fwLen) {
# Row indices corresponding to each subject #
idIdx <- lapply(X=idVec, FUN=function(x) which(idVec==x))
# Row indices corresponding to each cycle #
cycIdx <- lapply(X=idIdx, FUN=function(x) lapply(seq(1,length(x),fwLen),
function(j) x[j:(j + fwLen - 1)]) )
return (cycIdx)
}
ls()
idVec <- rep(x=cycle$subjId, each=fwLen)
fwLen=5
idVec <- rep(x=cycle$subjId, each=fwLen)
cycIdxDays <- getCycIdx( idVec=idVec, fwLen=(nrow(daily) / nrow(cycle)) )
cycIdxDays[[1:5]]
cycIdxDays[[1]]
cycIdxDays[[2]]
cycIdxDays[[3]]
cycIdxDays[[5]]
cycIdxDays
cycIdxDays[[5485]]
cycIdxDays[[1]]
cycIdxDays[[2]]
idVec <- unique(cycle$subjId)
cycIdxDays <- getCycIdx( idVec=idVec, fwLen=(nrow(daily) / nrow(cycle)) )
cycIdxDays[[1]]
idVec
cycle[1:10,]
cycIdxDays[[1]]
(nrow(daily) / nrow(cycle))
fwLen <- nrow(daily) / nrow(cycle)
fwLen
idVec <- rep(x=cycle$subjId, each=fwLen)
cycIdxDays <- getCycIdx( idVec=idVec, fwLen=fwLen )
cycIdxDays[[1]]
cycIdxDays[[2]]
idVec[1:30]
length(cycIdxDays)
nrow(cycle)
idIdx <- lapply(X=unique(idVec), FUN=function(x) which(idVec==x))
idIdx[[1]]
idIdx[[2]]
# Row indices corresponding to each cycle #
cycIdx <- lapply(X=idIdx, FUN=function(x) lapply(seq(1,length(x),fwLen),
function(j) x[j:(j + fwLen - 1)]) )
cycIdx[[1]]
cycIdx[[2]]
getCycIdx <- function(idVec, fwLen) {
# Row indices corresponding to each subject #
idIdx <- lapply(X=unique(idVec), FUN=function(x) which(idVec==x))
# Row indices corresponding to each cycle #
cycIdx <- lapply(X=idIdx, FUN=function(x) lapply(seq(1,length(x),fwLen),
function(j) x[j:(j + fwLen - 1)]) )
return (cycIdx)
}
cycIdxDays <- getCycIdx( idVec=idVec, fwLen=fwLen )
cycIdxDays[[1]]
cycIdxDays[[2]]
cycle[1:20,]
cycIdxDays[[3]]
cycIdxDays[[4]]
cycIdxCycles <- lapply(X=idVec, FUN=function(x) which(cyclePre$studyId == idVec))
cycIdxCycles <- lapply(X=idVec, FUN=function(x) which(cycle$studyId == idVec))
cycIdxCycles[[1]]
cycIdxCycles <- lapply(X=idVec, FUN=function(x) which(cycle$studyId == x))
idVec <- unique(cycle$subjId)
cycIdxCycles <- lapply(X=idVec, FUN=function(x) which(cycle$studyId == x))
length(cycIdxCycles)
cycIdxCycles[[1]]
cycIdxCycles[1]
idVec[1:5]
cycle$studyId[1:5]
cycle[1:5,]
cycIdxCycles <- lapply(X=idVec, FUN=function(x) which(cycle$subjId == x))
cycIdxCycles[[1]]
cycIdxCycles[[2]]
cycIdxCycles[[5]]
cycIdxCycles[[3]]
cycle[1:10,]
n <- length(idVec)
n
niVec <- length( unlist(cycIdx, recursive=FALSE) )
niVec[1:5]
niVec <- length( unlist(cycIdxCycles, recursive=FALSE) )
niVec[1:5]
cycIdxCycles[[1:5]]
cycIdxCycles[[1]]
cycIdxCycles[[2]]
length(cycIdxCycles
)
niVec <- sapply(X=1:n, FUN=function(x) length(cycIdxCycles[x]))
niVec[1:5]
niVec <- sapply(X=1:n, FUN=function(x) length(cycIdxCycles[[ x ]]))
niVec[1:5]
niVec <- sapply(X=cycIdxCycles, FUN=length)
niVec[1:5]
keepBoolCyc <- logical(length=nrow(cycle))
keepBoolDay <- logical(length=nrow(daily))
ctr <- 1
for (i in 1:n) {
for (j in 1:niVec[i]) {
if (pregVec[ctr] != 2) {
keepBoolCyc[ cycIdxCyc[[ i ]][[ j ]] ] <- TRUE
keepBoolDay[ cycIdxDay[[ i ]][[ j ]] ] <- TRUE
}
ctr <- ctr + 1
}
}
cycIdxDay <- getCycIdx(idVec=idVec, fwLen=fwLen)
cycIdxCyc <- lapply(X=idVec, FUN=function(x) which(cycle$subjId == x))
n <- length(idVec)
niVec <- sapply(X=cycIdxCyc, FUN=length)
keepBoolCyc <- logical(length=nrow(cycle))
keepBoolDay <- logical(length=nrow(daily))
ctr <- 1
for (i in 1:n) {
for (j in 1:niVec[i]) {
if (pregVec[ctr] != 2) {
keepBoolCyc[ cycIdxCyc[[ i ]][[ j ]] ] <- TRUE
keepBoolDay[ cycIdxDay[[ i ]][[ j ]] ] <- TRUE
}
ctr <- ctr + 1
}
}
cycle[1:30,]
keepBoolCyc[1:20]
cycle[1:20,]
pregVec[1:20]
table(pregVec)
pregVec[1:20]
rm(list=ls())
setwd("/home/dpritch/Documents/Projects/Dunson Day Specific/Software/Data_Sim")
source("SampBaseline.R")
source("SampCycle.R")
source("SampDaily.R")
source("SampDataComb.R")
source("SampPreg.R")
# Define study id's (and hence size)  -----------------------------------------
subjId <- 1:300
# Sample baseline data --------------------------------------------------------
baseNames <- c("age","race","bmi","gravid","edu","depr","smoke","drinkAlc","hormContrac")
baseDist <- expression( sample( c("< 30","30-35","35-38","38+"), size=1,
prob=c(0.41, 0.39, 0.11, 0.09) ),              #  <-- age
sample( c("cauc","black","hisp","other"),
size=1, prob=c(0.64, 0.12, 0.16, 0.08) ),      #  <-- race
sample( c("< 25","25-30","30+"), size=1,
prob=c(0.63, 0.21, 0.16) ),                    #  <-- bmi
sample( c("no","yes"), size=1, prob=c(0.42,0.58) ),    #  <-- gravid
sample( c("no college","college","grad/prof"),
size=1, prob=c(0.58, 0.30, 0.12) ),            #  <-- edu
sample( c("no","yes"), size=1, prob=c(0.90, 0.10) ),   #  <-- depr
sample( c("no","yes"), size=1, prob=c(0.82, 0.18) ),   #  <-- smoke
sample( c("no","yes"), size=1, prob=c(0.44, 0.56) ),   #  <-- drinkAlc
sample( c("no","yes"), size=1, prob=c(0.83, 0.17) ) )  #  <-- hormContrac
baseline <- sampBaseline(subjId=subjId, varDist=baseDist, varNames=baseNames)
# Sample cycle data -----------------------------------------------------------
# Describe the left and right truncation of observed data.  'lengthDist' is interpreted by
# sampCycle as *additional cycles in study after the first* (i.e. 0 is an allowable value).
entryDist <- expression( sample.int(n=3, size=1, prob=c(0.34,0.33,0.33)) )
lengthDist <- expression( rgeom(n=1, prob=0.25) )
# Describe the data-generating process for cycle-specific variables
cycNames <- c("cycleLen","opk_use","bleed_intermen","bleed_luteal")
cycDist <- expression( sample( c("< 28 days","28-31 days","32+ days"),
size=1, prob=c(0.11, 0.69, 0.20) ),             #  <-- cycleLen
sample( c("no","yes"), size=1, prob=c(0.70, 0.30) ),    #  <-- opk_use
sample( c("no","yes"), size=1, prob=c(0.57, 0.43) ),    #  <-- bleed_intermen
sample( c("no","yes"), size=1, prob=c(0.64, 0.36) ) )   #  <-- bleed_luteal
# Sample cycle data from the aforementioned distributions
cycle <- sampCycle(subjId=subjId, entryDist=entryDist, lengthDist=lengthDist,
maxStudyCyc=12, varDist=cycDist, varNames=cycNames)
# Sample daily data -----------------------------------------------------------
dailyNames <- c("intercourse","cm_monit","lube")
dailyDist <- expression( sample( c("no","yes"), size=1, prob=c(0.64, 0.36) ),    #  <-- intercourse
sample( c("didn't check","type 1",
"type 2","type 3","type 4"),
size=1, prob=c(0.04, 0.05, 0.08, 0.04, 0.79) ), #  <-- cm_monit
sample( c("no","yes"), size=1, prob=c(0.88, 0.12) ) )   #  <-- lube
daily <- sampDaily(nTot=nrow(cycle), fwLen=5, varDist=dailyDist, varNames=dailyNames)
# Combine data into a daily set -----------------------------------------------
analyData <- sampDataComb(baseline=baseline, cycle=cycle, daily=daily, fwLen=5)
# Sample subject pregnancy ----------------------------------------------------
betaDays <- log( c(0.14, 0.08, 0.34, 0.31, 0.08) )
betaCovs <- list( age = c(-0.08, -0.43, -1.03),
bmi = c(-0.22, -0.47),
gravid = 1.21 )
pregVec <- sampPreg(dspDat=analyData, betaDays=betaDays, betaCovs=betaCovs, phi=1, fwLen=5)
pregVec[1:20]
table(pregVec)
rm(list=ls())
setwd("/home/dpritch/Documents/Projects/Dunson Day Specific/Software/Data_Sim")
source("SampBaseline.R")
source("SampCycle.R")
source("SampDaily.R")
source("SampDataComb.R")
source("SampPreg.R")
# Define study id's (and hence size)  -----------------------------------------
subjId <- 1:300
# Sample baseline data --------------------------------------------------------
baseNames <- c("age","race","bmi","gravid","edu","depr","smoke","drinkAlc","hormContrac")
baseDist <- expression( sample( c("< 30","30-35","35-38","38+"), size=1,
prob=c(0.41, 0.39, 0.11, 0.09) ),              #  <-- age
sample( c("cauc","black","hisp","other"),
size=1, prob=c(0.64, 0.12, 0.16, 0.08) ),      #  <-- race
sample( c("< 25","25-30","30+"), size=1,
prob=c(0.63, 0.21, 0.16) ),                    #  <-- bmi
sample( c("no","yes"), size=1, prob=c(0.42,0.58) ),    #  <-- gravid
sample( c("no college","college","grad/prof"),
size=1, prob=c(0.58, 0.30, 0.12) ),            #  <-- edu
sample( c("no","yes"), size=1, prob=c(0.90, 0.10) ),   #  <-- depr
sample( c("no","yes"), size=1, prob=c(0.82, 0.18) ),   #  <-- smoke
sample( c("no","yes"), size=1, prob=c(0.44, 0.56) ),   #  <-- drinkAlc
sample( c("no","yes"), size=1, prob=c(0.83, 0.17) ) )  #  <-- hormContrac
baseline <- sampBaseline(subjId=subjId, varDist=baseDist, varNames=baseNames)
# Sample cycle data -----------------------------------------------------------
# Describe the left and right truncation of observed data.  'lengthDist' is interpreted by
# sampCycle as *additional cycles in study after the first* (i.e. 0 is an allowable value).
entryDist <- expression( sample.int(n=3, size=1, prob=c(0.34,0.33,0.33)) )
lengthDist <- expression( rgeom(n=1, prob=0.25) )
# Describe the data-generating process for cycle-specific variables
cycNames <- c("cycleLen","opk_use","bleed_intermen","bleed_luteal")
cycDist <- expression( sample( c("< 28 days","28-31 days","32+ days"),
size=1, prob=c(0.11, 0.69, 0.20) ),             #  <-- cycleLen
sample( c("no","yes"), size=1, prob=c(0.70, 0.30) ),    #  <-- opk_use
sample( c("no","yes"), size=1, prob=c(0.57, 0.43) ),    #  <-- bleed_intermen
sample( c("no","yes"), size=1, prob=c(0.64, 0.36) ) )   #  <-- bleed_luteal
# Sample cycle data from the aforementioned distributions
cycle <- sampCycle(subjId=subjId, entryDist=entryDist, lengthDist=lengthDist,
maxStudyCyc=12, varDist=cycDist, varNames=cycNames)
# Sample daily data -----------------------------------------------------------
dailyNames <- c("intercourse","cm_monit","lube")
dailyDist <- expression( sample( c("no","yes"), size=1, prob=c(0.64, 0.36) ),    #  <-- intercourse
sample( c("didn't check","type 1",
"type 2","type 3","type 4"),
size=1, prob=c(0.04, 0.05, 0.08, 0.04, 0.79) ), #  <-- cm_monit
sample( c("no","yes"), size=1, prob=c(0.88, 0.12) ) )   #  <-- lube
daily <- sampDaily(nTot=nrow(cycle), fwLen=5, varDist=dailyDist, varNames=dailyNames)
# Combine data into a daily set -----------------------------------------------
analyData <- sampDataComb(baseline=baseline, cycle=cycle, daily=daily, fwLen=5)
# Sample subject pregnancy ----------------------------------------------------
betaDays <- log( c(0.14, 0.08, 0.34, 0.31, 0.08) )
betaCovs <- list( age = c(-0.08, -0.43, -1.03),
bmi = c(-0.22, -0.47),
gravid = 1.21 )
pregVec <- sampPreg(dspDat=analyData, betaDays=betaDays, betaCovs=betaCovs, phi=1, fwLen=5)
pregVec[1:20]
table(pregVec)
166 / (166 + 541)
cycle$subjId[1:20]
cycle$subjId[1:40]
pregVec[1:40]
keepBoolCyc[1:20]
fwLen <- nrow(daily) / nrow(cycle)
idVec <- unique(cycle$subjId)
idDayVec <- rep(x=idVec, each=fwLen)
cycIdxDay <- getCycIdx(idVec=idVec, fwLen=fwLen)
cycIdxCyc <- lapply(X=idVec, FUN=function(x) which(cycle$subjId == x))
n <- length(idVec)
niVec <- sapply(X=cycIdxCyc, FUN=length)
keepBoolCyc <- logical(length=nrow(cycle))
keepBoolDay <- logical(length=nrow(daily))
ctr <- 1
for (i in 1:n) {
for (j in 1:niVec[i]) {
if (pregVec[ctr] != 2) {
keepBoolCyc[ cycIdxCyc[[ i ]][[ j ]] ] <- TRUE
keepBoolDay[ cycIdxDay[[ i ]][[ j ]] ] <- TRUE
}
ctr <- ctr + 1
}
}
i
j
cycIdxDay[[1]]
cycIdxDay <- getCycIdx(idVec=idDayVec, fwLen=fwLen)
cycIdxDay[[1]]
cycIdxDay[[2]]
cycIdxDay[[3]]
cycIdxDay[[4]]
cycIdxDay <- getCycIdx(idVec=idDayVec, fwLen=fwLen)
cycIdxDay[[2]]
idVec[1:5]
idDayVec[1:5]
idDayVec[1:20]
idDayVec <- rep(x=cycle$subjId, each=fwLen)
idDayVec[1:20]
idDayVec[1:50]
cycle$subjId[1:25]
fwLen <- nrow(daily) / nrow(cycle)
idVec <- unique(cycle$subjId)
idDayVec <- rep(x=cycle$subjId, each=fwLen)
cycIdxDay <- getCycIdx(idVec=idDayVec, fwLen=fwLen)
cycIdxCyc <- lapply(X=idVec, FUN=function(x) which(cycle$subjId == x))
n <- length(idVec)
niVec <- sapply(X=cycIdxCyc, FUN=length)
keepBoolCyc <- logical(length=nrow(cycle))
keepBoolDay <- logical(length=nrow(daily))
ctr <- 1
for (i in 1:n) {
for (j in 1:niVec[i]) {
if (pregVec[ctr] != 2) {
keepBoolCyc[ cycIdxCyc[[ i ]][[ j ]] ] <- TRUE
keepBoolDay[ cycIdxDay[[ i ]][[ j ]] ] <- TRUE
}
ctr <- ctr + 1
}
}
keepBoolCyc[1:20]
pregVec[1:20]
cyclePre <- cycle
dailyPre <- daily
pregVecPre <- pregVec
keepBoolDay[1:20]
rmSuperfluous <- function(cycle, daily, pregVec) {
fwLen <- nrow(daily) / nrow(cycle)
keepBoolCyc <- (pregVec != 2)
keepBoolDay <- rep(x=keepBoolCyc, each=fwLen)
cycle <- cycle[keepBoolCyc, ]
daily <- daily[keepBoolDay, ]
pregVec <- pregVec[keepBoolCyc]
return ( list(cycle = data.frame(cycle, pregInd=pregVec),
daily = daily) )
}
x <- rmSuperfluous(cycle, daily, pregVec)
names(x)
colnames(cycle)
colnames(x$cycle)
x$cycle$pregInd[1:20]
table(x$cycle$pregInd)
rm(list=ls())
setwd("/home/dpritch/Documents/Projects/Dunson Day Specific/Software/Data_Sim")
source("SampBaseline.R")
source("SampCycle.R")
source("SampDaily.R")
source("SampDataComb.R")
source("SampPreg.R")
# Define study id's (and hence size)  -----------------------------------------
subjId <- 1:300
# Sample baseline data --------------------------------------------------------
baseNames <- c("age","race","bmi","gravid","edu","depr","smoke","drinkAlc","hormContrac")
baseDist <- expression( sample( c("< 30","30-35","35-38","38+"), size=1,
prob=c(0.41, 0.39, 0.11, 0.09) ),              #  <-- age
sample( c("cauc","black","hisp","other"),
size=1, prob=c(0.64, 0.12, 0.16, 0.08) ),      #  <-- race
sample( c("< 25","25-30","30+"), size=1,
prob=c(0.63, 0.21, 0.16) ),                    #  <-- bmi
sample( c("no","yes"), size=1, prob=c(0.42,0.58) ),    #  <-- gravid
sample( c("no college","college","grad/prof"),
size=1, prob=c(0.58, 0.30, 0.12) ),            #  <-- edu
sample( c("no","yes"), size=1, prob=c(0.90, 0.10) ),   #  <-- depr
sample( c("no","yes"), size=1, prob=c(0.82, 0.18) ),   #  <-- smoke
sample( c("no","yes"), size=1, prob=c(0.44, 0.56) ),   #  <-- drinkAlc
sample( c("no","yes"), size=1, prob=c(0.83, 0.17) ) )  #  <-- hormContrac
baseline <- sampBaseline(subjId=subjId, varDist=baseDist, varNames=baseNames)
# Sample cycle data -----------------------------------------------------------
# Describe the left and right truncation of observed data.  'lengthDist' is interpreted by
# sampCycle as *additional cycles in study after the first* (i.e. 0 is an allowable value).
entryDist <- expression( sample.int(n=3, size=1, prob=c(0.34,0.33,0.33)) )
lengthDist <- expression( rgeom(n=1, prob=0.25) )
# Describe the data-generating process for cycle-specific variables
cycNames <- c("cycleLen","opk_use","bleed_intermen","bleed_luteal")
cycDist <- expression( sample( c("< 28 days","28-31 days","32+ days"),
size=1, prob=c(0.11, 0.69, 0.20) ),             #  <-- cycleLen
sample( c("no","yes"), size=1, prob=c(0.70, 0.30) ),    #  <-- opk_use
sample( c("no","yes"), size=1, prob=c(0.57, 0.43) ),    #  <-- bleed_intermen
sample( c("no","yes"), size=1, prob=c(0.64, 0.36) ) )   #  <-- bleed_luteal
# Sample cycle data from the aforementioned distributions
cyclePre <- sampCycle(subjId=subjId, entryDist=entryDist, lengthDist=lengthDist,
maxStudyCyc=12, varDist=cycDist, varNames=cycNames)
cyclePre[1:20,]
dailyNames <- c("intercourse","cm_monit","lube")
dailyDist <- expression( sample( c("no","yes"), size=1, prob=c(0.64, 0.36) ),    #  <-- intercourse
sample( c("didn't check","type 1",
"type 2","type 3","type 4"),
size=1, prob=c(0.04, 0.05, 0.08, 0.04, 0.79) ), #  <-- cm_monit
sample( c("no","yes"), size=1, prob=c(0.88, 0.12) ) )   #  <-- lube
dailyPre <- sampDaily(nTot=nrow(cyclePre), fwLen=5, varDist=dailyDist, varNames=dailyNames)
analyData <- sampDataComb(baseline=baseline, cycle=cyclePre, daily=dailyPre, fwLen=5)
betaDays <- log( c(0.14, 0.08, 0.34, 0.31, 0.08) )
betaCovs <- list( age = c(-0.08, -0.43, -1.03),
bmi = c(-0.22, -0.47),
gravid = 1.21 )
pregVecPre <- sampPreg(dspDat=analyData, betaDays=betaDays, betaCovs=betaCovs, phi=1, fwLen=5)
table(pregVecPre)
x <- rmSuperfluous(cyclePre, dailyPre, pregVecPre)
cycle <- x$cycle
daily <- x$daily
rm(list=setdiff(ls(), c("baseline","cycle","daily")))
ls()
dim(cycle)
167 / (519 + 167)
dim(daily)
